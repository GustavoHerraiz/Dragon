import synaptic from "synaptic";
import winston from "winston";
import fs from "fs";
import WebSocket from "ws"; // Importaci√≥n de WebSocket
import path from "path";
import { fileURLToPath } from "url";


const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Configuraci√≥n del logger
const logger = winston.createLogger({
  level: "info",
  transports: [
    new winston.transports.Console({ format: winston.format.simple() }),
    new winston.transports.File({ filename: "./logs/redAnalisisFirmasDigitales.log" }),
  ],
});


// Par√°metros ordenados y pesos
const parametros = [
  { nombre: "Software Detectado", peso: 0.3, esHumano: (valor) => valor < 0.7 },
  { nombre: "Marca C√°mara", peso: 0.2, esHumano: (valor) => valor !== 0 },
  { nombre: "Modelo C√°mara", peso: 0.2, esHumano: (valor) => valor !== 0 },
  { nombre: "Fecha de Captura", peso: 0.15, esHumano: (valor) => valor !== 0 },
  { nombre: "Fecha de Modificaci√≥n", peso: 0.15, esHumano: (valor) => valor !== 0 },
];

// Funci√≥n para limpiar nombres de software y eliminar versiones
const limpiarNombreSoftware = (nombreSoftware) => {
  if (typeof nombreSoftware !== "string" || !nombreSoftware.trim()) return "Indeterminado"; // Valor predeterminado
  return nombreSoftware.replace(/[\d.]+$/g, "").trim();
};


// Mapeo de versiones detectadas a software leg√≠timo
const softwareEdicion = {
  fotografiaProfesional: [
    "Adobe Photoshop", "Lightroom", "Capture One", "DxO PhotoLab", "ON1 Photo RAW",
    "Luminar", "ACDSee", "PaintShop Pro", "Pixelmator", "RawTherapee", "Darktable",
    "Exposure X", "PhotoScape", "PhotoDirector"
  ],
  ilustracionYDisenoGrafico: [
    "Affinity Photo", "GIMP", "CorelDRAW", "Krita", "Sketch", "Inkscape", "ArtRage",
    "MediBang Paint Pro"
  ],
  edicionVideoYPostproduccion: [
    "After Effects", "Final Cut Pro", "DaVinci Resolve", "Blackmagic Fusion",
    "HitFilm Express", "Natron"
  ],
  diseno3DYTexturizado: [
    "Autodesk Maya", "Cinema 4D", "Blender", "ZBrush", "Substance Painter",
    "Marmoset Toolbag", "Nuke", "Mari", "Houdini", "3D-Coat"
  ],
  edicionMovil: [
    "Apple Photos", "PicsArt", "BeFunky", "Fotor", "iPiccy", "Ribbet", "Sumo Paint",
    "YouCam Perfect", "Phonto", "Snapseed", "VSCO", "Polarr", "Prisma",
    "Superimpose X", "Enlight Photofox", "TouchRetouch", "Facetune",
    "Darkroom", "Mextures", "Afterlight", "RNI Films", "Filmborn",
    "A Color Story", "Tezza", "Foodie", "Huji Cam", "Unfold",
    "InShot", "Canva"
  ]
};

// Clase de la red
class RedAnalisisFirmasDigitales {
  constructor() {
    try {
      const rawData = fs.readFileSync(path.join(__dirname, "RedDeFirmasDigitales_Entrenada.json"), "utf8");
      this.network = synaptic.Network.fromJSON(JSON.parse(rawData));
      logger.info("‚úÖ Modelo cargado desde RedDeFirmasDigitales_Entrenada.json correctamente.");
    } catch (error) {
      logger.error(`‚ùå Error al cargar el modelo: ${error.message}`);
      this.network = new synaptic.Architect.Perceptron(5, 3, 1);
      logger.info("‚ö†Ô∏è Red neuronal inicializada por defecto.");
    }

    logger.info("üåê Iniciando conexi√≥n con el servidor central...");
    this.conectarConServidor();
  }

  conectarConServidor() {
    const socket = new WebSocket("ws://localhost:8080");
    this.socket = socket; // Almacena el socket en la instancia de la clase

    logger.info("üîó Intentando conectar con el servidor central...");

    socket.on("open", () => {
      logger.info("üîó Conexi√≥n con el servidor central establecida.");
      socket.send(
        JSON.stringify({
          red: "analisisDeFirmasDigitales",
          salida: 1,
          detalles: { mensaje: "Conexi√≥n inicial exitosa." },
        })
      );
    });

    socket.on("error", (error) => {
      logger.error(`‚ùå Error en la conexi√≥n WebSocket: ${error.message}`);
    });

    socket.on("message", (message) => {
      try {
        const respuesta = JSON.parse(message);
        logger.info(`üì® Mensaje recibido del servidor central: ${JSON.stringify(respuesta)}`);

        if (respuesta.tipo === "orden" && respuesta.ordenes) {
          logger.info("üîß Ejecutando √≥rdenes obligatorias del servidor central...");
          respuesta.ordenes.forEach((orden) => {
            logger.info(`üîÑ Aplicando ${orden.parametro} a ${orden.nuevo_valor || orden.mensaje}`);
            const parametroEncontrado = parametros.find((p) => p.nombre === orden.parametro);
            if (parametroEncontrado && orden.nuevo_valor) {
              parametroEncontrado.peso = orden.nuevo_valor;
              logger.info(`‚úÖ Peso del par√°metro ${orden.parametro} actualizado a ${orden.nuevo_valor}.`);
            }
          });

          socket.send(
            JSON.stringify({
              tipo: "confirmacion",
              mensaje: "√ìrdenes ejecutadas con √©xito.",
              detalles: respuesta.ordenes,
            })
          );
          logger.info("‚úÖ Confirmaci√≥n enviada al servidor central.");
        }
      } catch (error) {
        logger.error(`‚ùå Error al procesar el mensaje recibido: ${error.message}`);
      }
    });

    socket.on("close", () => {
      logger.warn("üîå Conexi√≥n cerrada con el servidor central. Intentando reconectar en 5 segundos...");
      setTimeout(() => this.conectarConServidor(), 5000);
    });
  }



  analizar(datos, softwareFirmasDigitales) {
  try {
    logger.info("üì£ M√©todo `analizar` invocado.");
    logger.info("üì• Datos recibidos para el an√°lisis:");
    logger.info(JSON.stringify(datos, null, 2));

    // Validar los datos recibidos
    if (!datos || datos.length === 0) {
      logger.warn("‚ö†Ô∏è Los datos recibidos est√°n vac√≠os o no v√°lidos.");
      return { error: "Datos no v√°lidos." };
    }

    // Limpieza de datos
    datos = datos.map((dato, index) => {
      if (index === 1 || index === 3 || index === 4) return dato; // Preserva cadenas en √≠ndices relevantes
      return isNaN(dato) || dato === null ? 0 : dato;
    });

    logger.info(`üìã Datos despu√©s de limpieza: ${JSON.stringify(datos)}`);

    // Incorporar `softwareFirmasDigitales` directamente
    if (softwareFirmasDigitales) {
      logger.info("üì¶ Incorporando `softwareFirmasDigitales` en la evaluaci√≥n...");
      logger.info("üìã Datos de la variable `softwareFirmasDigitales` antes del procesamiento:");
      logger.info(JSON.stringify(softwareFirmasDigitales, null, 2));

      const { softwareDetectado, confiabilidad, tipoFirma, metadatos } = softwareFirmasDigitales;

      // Actualizar √≠ndices relevantes en `datos`
      datos[1] = softwareDetectado || "No disponible"; // Software detectado
      datos[2] = metadatos.modelo || "No disponible"; // Modelo de c√°mara
      datos[3] = metadatos.fechaOriginal || "No disponible"; // Fecha original
      datos[4] = metadatos.fechaModificacion || "No disponible"; // Fecha modificaci√≥n

      logger.info("üìã Datos actualizados con `softwareFirmasDigitales`:");
      logger.info(JSON.stringify(datos, null, 2));
    }

    // Proceso de la red neuronal
    logger.info("‚öôÔ∏è Procesando datos con la red neuronal...");
    const resultado = this.network.activate(datos);

    let scorePonderado = 0;
    parametros.forEach((parametro, i) => {
      const valor = datos[i];
      const esHumano = parametro.esHumano(valor) ? 1 : 0;
      scorePonderado += esHumano * parametro.peso;
      logger.info(`üîç ${parametro.nombre}: Valor=${valor}, Humano=${esHumano}, Peso=${parametro.peso}`);
    });

    let scoreFinal = parseFloat(((1 - scorePonderado) * 10).toFixed(2));

    // Refuerzo de puntuaci√≥n basado en confiabilidad
    if (softwareFirmasDigitales?.confiabilidad) {
      const puntuacionRefuerzo = parseFloat((softwareFirmasDigitales.confiabilidad * 10).toFixed(2));
      scoreFinal = Math.max(scoreFinal, puntuacionRefuerzo);
      logger.info(`üîß Refuerzo del puntaje basado en confiabilidad: ${puntuacionRefuerzo}`);
    }

    const resultadoFormateado = {
      nombreAnalizador: "analizadorFirmasDigitales",
      descripcion: "An√°lisis de firmas digitales en los metadatos EXIF.",
      score: scoreFinal,
      metadatos: {
        softwareDetectado: datos[1],
        marcaCamara: datos[2],
        modeloCamara: datos[2],
        fechaCaptura: datos[3],
        fechaModificacion: datos[4],
      },
      detalles: {
        mensaje: softwareFirmasDigitales?.tipoFirma === "Software leg√≠timo (Humano)"
          ? `Los metadatos indican una imagen aut√©ntica con software leg√≠timo: ${datos[1]}.`
          : scoreFinal <= 3
          ? `Se detect√≥ una firma digital sospechosa. Software: ${datos[1]}.`
          : `Los metadatos muestran caracter√≠sticas intermedias. Software: ${datos[1]}.`,
      },
    };

    logger.info("üìÑ Resultado formateado para el sistema:");
    logger.info(JSON.stringify(resultadoFormateado, null, 2));

    // Enviar al servidor central
    if (this.socket && this.socket.readyState === WebSocket.OPEN) {
      this.socket.send(
        JSON.stringify({
          red: "analisisDeFirmasDigitales",
          salida: resultadoFormateado.score,
          detalles: resultadoFormateado.detalles,
        })
      );
      logger.info("üì§ Resultado enviado al servidor central.");
    } else {
      logger.warn("‚ö†Ô∏è No se pudo enviar el resultado, conexi√≥n no establecida.");
    }

    return resultadoFormateado;
  } catch (error) {
    logger.error(`‚ùå Error durante el an√°lisis: ${error.message}`);
    return {
      error: "Ocurri√≥ un error durante el an√°lisis.",
      detalles: { mensaje: error.message },
    };
  }
}



}

export default RedAnalisisFirmasDigitales;
